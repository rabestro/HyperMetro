{"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find a route for complex graph","should find a route for simple graph","should return an empty path if can't find a route","should thrown NPE path for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":153},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find a route for a complex graph","should find a route for a medium graph","should find a route for a simple graph","should return an empty path if can't find a route","should thrown NPE for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":108},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should be zero distance for an empty path","should be zero distance for any one node path","should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":192},"title":"Generic Graph","narrative":"A simple implementation of Graph structure"},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":425},"title":"","narrative":""},"metro.shell.MetroCommandsSpec":{"executedFeatures":["should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":47},"title":"","narrative":""},"metro.shell.PromptSpec":{"executedFeatures":["should generate a prompt with metro name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":55},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":0,"successRate":0.0,"time":995},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":0,"successRate":0.0,"time":442},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":0,"successRate":0.0,"time":442},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":0,"successRate":0.0,"time":463},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":0,"successRate":0.0,"time":477},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":0,"successRate":0.0,"time":461},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":["should append a new station to the end of metro line"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":416},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":["should append a new station to the end of metro line"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":555},"title":"","narrative":""},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find a route for complex graph","should find a route for simple graph","should return an empty path if can't find a route","should thrown NPE path for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":121},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find a route for a complex graph","should find a route for a medium graph","should find a route for a simple graph","should return an empty path if can't find a route","should thrown NPE for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":103},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should be zero distance for an empty path","should be zero distance for any one node path","should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":168},"title":"Generic Graph","narrative":"A simple implementation of Graph structure"},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":["should append a new station to the end of metro line"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":411},"title":"","narrative":""},"metro.shell.MetroCommandsSpec":{"executedFeatures":["should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":52},"title":"","narrative":""},"metro.shell.PromptSpec":{"executedFeatures":["should generate a prompt with metro name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":39},"title":"","narrative":""},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find a route for complex graph","should find a route for simple graph","should return an empty path if can't find a route","should thrown NPE path for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":172},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find a route for a complex graph","should find a route for a medium graph","should find a route for a simple graph","should return an empty path if can't find a route","should thrown NPE for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":93},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should be zero distance for an empty path","should be zero distance for any one node path","should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":231},"title":"Generic Graph","narrative":"A simple implementation of Graph structure"},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should find metro line by name"],"ignoredFeatures":["should append a new station to the end of metro line"],"stats":{"failures":0,"errors":0,"skipped":1,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":1093},"title":"","narrative":""},"metro.shell.MetroCommandsSpec":{"executedFeatures":["should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":109},"title":"","narrative":""},"metro.shell.PromptSpec":{"executedFeatures":["should generate a prompt with metro name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":79},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":378},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":408},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":393},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":387},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":2,"passed":1,"successRate":1.0,"time":442},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":409},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":413},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":396},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":2,"successRate":0.6666666666666666,"time":646},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":443},"title":"","narrative":""},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find a route for complex graph","should find a route for simple graph","should return an empty path if can't find a route","should thrown NPE path for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":107},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find a route for a complex graph","should find a route for a medium graph","should find a route for a simple graph","should return an empty path if can't find a route","should thrown NPE for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":100},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should be zero distance for an empty path","should be zero distance for any one node path","should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":119},"title":"Generic Graph","narrative":"A simple implementation of Graph structure"},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":411},"title":"","narrative":""},"metro.shell.MetroCommandsSpec":{"executedFeatures":["should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":34},"title":"","narrative":""},"metro.shell.PromptSpec":{"executedFeatures":["should generate a prompt with metro name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":36},"title":"","narrative":""},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find a route for complex graph","should find a route for simple graph","should return an empty path if can't find a route","should thrown NPE path for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":141},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find a route for a complex graph","should find a route for a medium graph","should find a route for a simple graph","should return an empty path if can't find a route","should thrown NPE for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":119},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should be zero distance for an empty path","should be zero distance for any one node path","should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":159},"title":"Generic Graph","narrative":"A simple implementation of Graph structure"},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":570},"title":"","narrative":""},"metro.shell.MetroCommandsSpec":{"executedFeatures":["should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":44},"title":"","narrative":""},"metro.shell.PromptSpec":{"executedFeatures":["should generate a prompt with metro name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":68},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":496},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":1,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":0,"successRate":0.0,"time":464},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":3,"passed":1,"successRate":1.0,"time":371},"title":"","narrative":""},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find a route for complex graph","should find a route for simple graph","should return an empty path if can't find a route","should thrown NPE path for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":152},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find a route for a complex graph","should find a route for a medium graph","should find a route for a simple graph","should return an empty path if can't find a route","should thrown NPE for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":170},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should be zero distance for an empty path","should be zero distance for any one node path","should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":246},"title":"Generic Graph","narrative":"A simple implementation of Graph structure"},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":419},"title":"","narrative":""},"metro.shell.MetroCommandsSpec":{"executedFeatures":["should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":33},"title":"","narrative":""},"metro.shell.PromptSpec":{"executedFeatures":["should generate a prompt with metro name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":37},"title":"","narrative":""},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find a route for complex graph","should find a route for simple graph","should return an empty path if can't find a route","should thrown NPE path for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":115},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find a route for a complex graph","should find a route for a medium graph","should find a route for a simple graph","should return an empty path if can't find a route","should thrown NPE for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":101},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should be zero distance for an empty path","should be zero distance for any one node path","should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":162},"title":"Generic Graph","narrative":"A simple implementation of Graph structure"},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":58},"title":"","narrative":""},"metro.shell.MetroCommandsSpec":{"executedFeatures":["should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":49},"title":"","narrative":""},"metro.shell.PromptSpec":{"executedFeatures":["should generate a prompt with metro name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":43},"title":"","narrative":""},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find a route for complex graph","should find a route for simple graph","should return an empty path if can't find a route","should thrown NPE path for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":158},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find a route for a complex graph","should find a route for a medium graph","should find a route for a simple graph","should return an empty path if can't find a route","should thrown NPE for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":195},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should be zero distance for an empty path","should be zero distance for any one node path","should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":247},"title":"Generic Graph","narrative":"A simple implementation of Graph structure"},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":78},"title":"","narrative":""},"metro.shell.MetroCommandsSpec":{"executedFeatures":["should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":153},"title":"","narrative":""},"metro.shell.PromptSpec":{"executedFeatures":["should generate a prompt with metro name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":99},"title":"","narrative":""},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find a route for complex graph","should find a route for simple graph","should return an empty path if can't find a route","should thrown NPE path for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":511},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find a route for a complex graph","should find a route for a medium graph","should find a route for a simple graph","should return an empty path if can't find a route","should thrown NPE for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":465},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should be zero distance for an empty path","should be zero distance for any one node path","should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":676},"title":"Generic Graph","narrative":"A simple implementation of Graph structure"},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":1,"successRate":0.3333333333333333,"time":282},"title":"","narrative":""},"metro.shell.MetroCommandsSpec":{"executedFeatures":["should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":156},"title":"","narrative":""},"metro.shell.PromptSpec":{"executedFeatures":["should generate a prompt with metro name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":212},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"totalFeatures":3,"passed":3,"successRate":1.0,"time":209},"title":"","narrative":""},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find a route for complex graph","should find a route for simple graph","should return an empty path if can't find a route","should thrown NPE path for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":286},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find a route for a complex graph","should find a route for a medium graph","should find a route for a simple graph","should return an empty path if can't find a route","should thrown NPE for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":340},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should be zero distance for an empty path","should be zero distance for any one node path","should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":590},"title":"Generic Graph","narrative":"A simple implementation of Graph structure"},"metro.shell.MetroCommandsSpec":{"executedFeatures":["should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":155},"title":"","narrative":""},"metro.shell.PromptSpec":{"executedFeatures":["should generate a prompt with metro name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":201},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["Remove","should add a new station to the head of metro line","should append a new station to the end of metro line","should find metro line by name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":4,"passed":1,"successRate":1.0,"time":88},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should add-head a new station to the empty metro line","should append a new station to the end of metro line","should find metro line by name","should throw an exception for unimplemented remove operation"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":0,"successRate":0.0,"time":327},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should add-head a new station to the empty metro line","should append a new station to the end of metro line","should find metro line by name","should throw an exception for unimplemented remove operation"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":0,"successRate":0.0,"time":264},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should add-head a new station to the empty metro line","should append a new station to the end of metro line","should find metro line by name","should throw an exception for unimplemented remove operation"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":0,"successRate":0.0,"time":356},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should add-head a new station to the empty metro line","should append a new station to the end of metro line","should find metro line by name","should throw an exception for unimplemented remove operation"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":1,"successRate":1.0,"time":191},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should add-head a new station to the empty metro line","should append a new station to the end of metro line","should find metro line by name","should throw an exception for unimplemented remove operation"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":0,"successRate":0.0,"time":260},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should add-head a new station to the empty metro line","should append a new station to the end of metro line","should find metro line by name","should throw an exception for unimplemented remove operation"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":0,"successRate":0.0,"time":334},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should add-head a new station to the empty metro line","should append a new station to the end of metro line","should find metro line by name","should throw an exception for unimplemented remove operation"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":1,"successRate":1.0,"time":215},"title":"","narrative":""},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should add-head a new station to the empty metro line","should append a new station to the end of metro line","should find metro line by name","should throw an exception for unimplemented remove operation"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":5,"passed":1,"successRate":1.0,"time":191},"title":"","narrative":""},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find a route for complex graph","should find a route for simple graph","should return an empty path if can't find a route","should thrown NPE path for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":369},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find a route for a complex graph","should find a route for a medium graph","should find a route for a simple graph","should return an empty path if can't find a route","should thrown NPE for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":296},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should be zero distance for an empty path","should be zero distance for any one node path","should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":618},"title":"Generic Graph","narrative":"A simple implementation of Graph structure"},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should add-head a new station to the empty metro line","should append a new station to the end of metro line","should find metro line by name","should throw an exception for unimplemented remove operation"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":315},"title":"","narrative":""},"metro.shell.MetroCommandsSpec":{"executedFeatures":["should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":180},"title":"","narrative":""},"metro.shell.PromptSpec":{"executedFeatures":["should generate a prompt with metro name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":129},"title":"","narrative":""},"metro.algorithm.BreadthFirstSearchSpec":{"executedFeatures":["should find a route for complex graph","should find a route for simple graph","should return an empty path if can't find a route","should thrown NPE path for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"totalFeatures":4,"passed":4,"successRate":1.0,"time":332},"title":"Breadth First Search Algorithm","narrative":"Breadth First Search algorithm for finding the shortest paths between nodes in a graph"},"metro.algorithm.DijkstrasAlgorithmSpec":{"executedFeatures":["should find a route for a complex graph","should find a route for a medium graph","should find a route for a simple graph","should return an empty path if can't find a route","should thrown NPE for an empty graph"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":292},"title":"Dijkstra's Algorithm","narrative":"Dijkstra's algorithm is an algorithm for finding the fastest paths between nodes in a graph"},"metro.algorithm.GraphSpec":{"executedFeatures":["should be zero distance for an empty path","should be zero distance for any one node path","should calculate distance for a path","should return edges for a given node","should throw NPE for incorrect path"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":536},"title":"Generic Graph","narrative":"A simple implementation of Graph structure"},"metro.repository.MetroRepositoryJsonSpec":{"executedFeatures":["should add a new station to the head of metro line","should add-head a new station to the empty metro line","should append a new station to the end of metro line","should find metro line by name","should throw an exception for unimplemented remove operation"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":5,"totalFeatures":5,"passed":5,"successRate":1.0,"time":181},"title":"","narrative":""},"metro.shell.MetroCommandsSpec":{"executedFeatures":["should execute add-head command"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":226},"title":"","narrative":""},"metro.shell.PromptSpec":{"executedFeatures":["should generate a prompt with metro name"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"totalFeatures":1,"passed":1,"successRate":1.0,"time":188},"title":"","narrative":""}}